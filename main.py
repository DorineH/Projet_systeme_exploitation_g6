
class Task:

    def __init__(self, name, reads, writes, func):
        self.name= name
        self.reads = reads
        self.writes = writes
        self.func = func
        self.lock = threading.Lock() # ajout du verrou
        self.dependents = []

# initialisation des tâches 
T1 = Task("T1",  ['M1'],['M4'], lambda: print("Exécution de la tâche : T1 "))
T2 = Task("T2", ["M3","M4"], ["M1"], lambda: print("Exécution de la tâche : T2"))  
T3 = Task("T3", ["M3","M4"], ["M5"] , lambda: print("Exécution de la tâche : T3")) 
T4 = Task("T4", ["M4"], ["M2"], lambda: print("Exécution de la tâche : T4")) 
T5 = Task("T5", ["M5"], ["M5"], lambda: print("Exécution de la tâche : T5" )) 
T6 = Task("T6", ["M1", "M2"],["M4"], lambda: print("Exécution de la tâche : T6")) 

# initialisation du système de tâches 
s1 = TaskSystem([T1, T2, T3, T4, T5, T6], {T1: [], T2: [T1], T3: [T1],T4: [T2, T3], T5: [T3], T6: [T4, T5]})
